msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[i]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[i]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[i]]$")
for (peak in unlist(strsplit(msp_lib[[2]][[i]]$spectrumString, ";"))) {
msp_file[length(msp_file)+1] <- gsub(x=unlist(strsplit(msp_lib[[2]][[i]]$spectrumString, ";")), pattern=" ", replacement="\t")
}
msp_file[length(msp_file)+1] <- ""
}
# Save file
writeLines(text=msp_file, con=msp_filename)
}
mFam_file
mFam_num_spectra <- read_msp(mFam_file)$numberOfSpectra
getwd()
mFam_num_spectra <- read_msp(unlist(mFam_file))$numberOfSpectra
# mFam compound library
mFam_file <- as.character(unlist(args[2]))
# Scaffolds
scaff <- as.character(unlist(args[3]))
# Output dir
out_dir <- as.character(unlist(args[4]))
mFam_num_spectra
x <- rep(1,mFam_num_spectra)
x
args[4] <- "data/ga_output"
# Output dir
out_dir <- as.character(unlist(args[4]))
mkdir
?makedir
??mkdir
?dir.create
# Apply binary vector to mFam library
dir.create(path=paste0(out_dir,"/ga_01"), recursive=TRUE, mode="0755")
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
# Read mFam library
mFam_lib <- read_msp(mFam_file)
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
# ---------- Write MSP ----------
write_msp <- function(msp_filename, msp_lib, indices=NULL) {
# Length / number of spectra
msp_lib_len <- length(msp_lib[[2]])
# Write all spectra
if (is.null(indices)) {
indices <- rep(1, msp_lib_len)
}
# Loop through spectra
msp_file <- NULL
for (msp_entry in 1:msp_lib_len) {
# Do not write spectra with index of 0
if (indices[msp_entry] == 0) break
msp_file[length(msp_file)+1] <- paste0("NAME: ", "msp_lib[[2]][[i]]$name")
msp_file[length(msp_file)+1] <- paste0("RETENTIONTIME: ", "msp_lib[[2]][[i]]$rt")
msp_file[length(msp_file)+1] <- paste0("PRECURSORMZ: ", "msp_lib[[2]][[i]]$mz")
msp_file[length(msp_file)+1] <- paste0("PRECURSORTYPE: ", "msp_lib[[2]][[i]]$adduct")
msp_file[length(msp_file)+1] <- paste0("IONMODE: ", "msp_lib[[2]][[i]]$adduct")
msp_file[length(msp_file)+1] <- paste0("INCHIKEY: ", "msp_lib[[2]][[i]]$inchikey")
msp_file[length(msp_file)+1] <- paste0("INCHI: ", "msp_lib[[2]][[i]]$inchi")
msp_file[length(msp_file)+1] <- paste0("SMILES: ", "msp_lib[[2]][[i]]$smiles")
msp_file[length(msp_file)+1] <- paste0("INTENSITY: ", "msp_lib[[2]][[i]]$ms1Int")
msp_file[length(msp_file)+1] <- paste0("INSTRUMENTTYPE: ", "msp_lib[[2]][[i]]$instrumentType")
msp_file[length(msp_file)+1] <- paste0("Num Peaks: ", "msp_lib[[2]][[i]]$peakNumber")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[i]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[i]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[i]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[i]]$")
for (peak in unlist(strsplit(msp_lib[[2]][[i]]$spectrumString, ";"))) {
msp_file[length(msp_file)+1] <- gsub(x=unlist(strsplit(msp_lib[[2]][[i]]$spectrumString, ";")), pattern=" ", replacement="\t")
}
msp_file[length(msp_file)+1] <- ""
}
# Save file
writeLines(text=msp_file, con=msp_filename)
}
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
# ---------- Write MSP ----------
write_msp <- function(msp_filename, msp_lib, indices=NULL) {
# Length / number of spectra
msp_lib_len <- length(msp_lib[[2]])
# Write all spectra
if (is.null(indices)) {
indices <- rep(1, msp_lib_len)
}
# Loop through spectra
msp_file <- NULL
for (msp_entry in 1:msp_lib_len) {
# Do not write spectra with index of 0
if (indices[msp_entry] == 0) break
msp_file[length(msp_file)+1] <- paste0("NAME: ", "msp_lib[[2]][[msp_entry]]$name")
msp_file[length(msp_file)+1] <- paste0("RETENTIONTIME: ", "msp_lib[[2]][[msp_entry]]$rt")
msp_file[length(msp_file)+1] <- paste0("PRECURSORMZ: ", "msp_lib[[2]][[msp_entry]]$mz")
msp_file[length(msp_file)+1] <- paste0("PRECURSORTYPE: ", "msp_lib[[2]][[msp_entry]]$adduct")
msp_file[length(msp_file)+1] <- paste0("IONMODE: ", "msp_lib[[2]][[msp_entry]]$adduct")
msp_file[length(msp_file)+1] <- paste0("INCHIKEY: ", "msp_lib[[2]][[msp_entry]]$inchikey")
msp_file[length(msp_file)+1] <- paste0("INCHI: ", "msp_lib[[2]][[msp_entry]]$inchi")
msp_file[length(msp_file)+1] <- paste0("SMILES: ", "msp_lib[[2]][[msp_entry]]$smiles")
msp_file[length(msp_file)+1] <- paste0("INTENSITY: ", "msp_lib[[2]][[msp_entry]]$ms1Int")
msp_file[length(msp_file)+1] <- paste0("INSTRUMENTTYPE: ", "msp_lib[[2]][[msp_entry]]$instrumentType")
msp_file[length(msp_file)+1] <- paste0("Num Peaks: ", "msp_lib[[2]][[msp_entry]]$peakNumber")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[msp_entry]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[msp_entry]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[msp_entry]]$")
msp_file[length(msp_file)+1] <- paste0(": ", "msp_lib[[2]][[msp_entry]]$")
for (peak in unlist(strsplit(msp_lib[[2]][[msp_entry]]$spectrumString, ";"))) {
msp_file[length(msp_file)+1] <- gsub(x=unlist(strsplit(msp_lib[[2]][[msp_entry]]$spectrumString, ";")), pattern=" ", replacement="\t")
}
msp_file[length(msp_file)+1] <- ""
}
# Save file
writeLines(text=msp_file, con=msp_filename)
}
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
x <- rep(0,mFam_num_spectra)
x[1:100] <- 1
x[1:102]
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
# ---------- Write MSP ----------
write_msp <- function(msp_filename, msp_lib, indices=NULL) {
# Length / number of spectra
msp_lib_len <- length(msp_lib[[2]])
# Write all spectra
if (is.null(indices)) {
indices <- rep(1, msp_lib_len)
}
# Loop through spectra
msp_file <- NULL
for (msp_entry in 1:msp_lib_len) {
# Do not write spectra with index of 0
if (indices[msp_entry] == 0) break
msp_file[length(msp_file)+1] <- paste0("NAME: ", msp_lib[[2]][[msp_entry]]$name)
msp_file[length(msp_file)+1] <- paste0("RETENTIONTIME: ", msp_lib[[2]][[msp_entry]]$rt)
msp_file[length(msp_file)+1] <- paste0("PRECURSORMZ: ", msp_lib[[2]][[msp_entry]]$mz)
msp_file[length(msp_file)+1] <- paste0("PRECURSORTYPE: ", msp_lib[[2]][[msp_entry]]$adduct)
msp_file[length(msp_file)+1] <- paste0("IONMODE: ", msp_lib[[2]][[msp_entry]]$adduct)
msp_file[length(msp_file)+1] <- paste0("INCHIKEY: ", msp_lib[[2]][[msp_entry]]$inchikey)
msp_file[length(msp_file)+1] <- paste0("INCHI: ", msp_lib[[2]][[msp_entry]]$inchi)
msp_file[length(msp_file)+1] <- paste0("SMILES: ", msp_lib[[2]][[msp_entry]]$smiles)
msp_file[length(msp_file)+1] <- paste0("INTENSITY: ", msp_lib[[2]][[msp_entry]]$ms1Int)
msp_file[length(msp_file)+1] <- paste0("INSTRUMENTTYPE: ", msp_lib[[2]][[msp_entry]]$instrumentType)
msp_file[length(msp_file)+1] <- paste0("Num Peaks: ", msp_lib[[2]][[msp_entry]]$peakNumber)
for (peak in unlist(strsplit(msp_lib[[2]][[msp_entry]]$spectrumString, ";"))) {
msp_file[length(msp_file)+1] <- gsub(x=unlist(strsplit(msp_lib[[2]][[msp_entry]]$spectrumString, ";")), pattern=" ", replacement="\t")
}
msp_file[length(msp_file)+1] <- ""
}
# Save file
writeLines(text=msp_file, con=msp_filename)
}
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
warnings()
mFam_lib[[2]][[1]]$spectrumString
gsub(x=unlist(mFam_lib[[2]][[1]]$spectrumString, ";")), pattern=" ", replacement="\t")
gsub(x=unlist(strsplit(mFam_lib[[2]][[1]]$spectrumString, ";")), pattern=" ", replacement="\t")
# ---------- Write MSP ----------
write_msp <- function(msp_filename, msp_lib, indices=NULL) {
# Length / number of spectra
msp_lib_len <- length(msp_lib[[2]])
# Write all spectra
if (is.null(indices)) {
indices <- rep(1, msp_lib_len)
}
# Loop through spectra
msp_file <- NULL
for (msp_entry in 1:msp_lib_len) {
# Do not write spectra with index of 0
if (indices[msp_entry] == 0) break
msp_file[length(msp_file)+1] <- paste0("NAME: ", msp_lib[[2]][[msp_entry]]$name)
msp_file[length(msp_file)+1] <- paste0("RETENTIONTIME: ", msp_lib[[2]][[msp_entry]]$rt)
msp_file[length(msp_file)+1] <- paste0("PRECURSORMZ: ", msp_lib[[2]][[msp_entry]]$mz)
msp_file[length(msp_file)+1] <- paste0("PRECURSORTYPE: ", msp_lib[[2]][[msp_entry]]$adduct)
msp_file[length(msp_file)+1] <- paste0("IONMODE: ", msp_lib[[2]][[msp_entry]]$adduct)
msp_file[length(msp_file)+1] <- paste0("INCHIKEY: ", msp_lib[[2]][[msp_entry]]$inchikey)
msp_file[length(msp_file)+1] <- paste0("INCHI: ", msp_lib[[2]][[msp_entry]]$inchi)
msp_file[length(msp_file)+1] <- paste0("SMILES: ", msp_lib[[2]][[msp_entry]]$smiles)
msp_file[length(msp_file)+1] <- paste0("INTENSITY: ", msp_lib[[2]][[msp_entry]]$ms1Int)
msp_file[length(msp_file)+1] <- paste0("INSTRUMENTTYPE: ", msp_lib[[2]][[msp_entry]]$instrumentType)
msp_file[length(msp_file)+1] <- paste0("Num Peaks: ", msp_lib[[2]][[msp_entry]]$peakNumber)
for (peak in unlist(strsplit(msp_lib[[2]][[msp_entry]]$spectrumString, ";"))) {
msp_file[length(msp_file)+1] <- gsub(x=peak, pattern=" ", replacement="\t")
}
msp_file[length(msp_file)+1] <- ""
}
# Save file
writeLines(text=msp_file, con=msp_filename)
}
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
gen_mFam_lib <- read_msp(paste0(out_dir,"/ga_01/","lib.msp"))
warnings()
str(gen_mFam_lib)
gen_mFam_lib[[2]][[1]]
?system2
# Execute classifier
system2(command="./galaxy/mFam_train_classifier.r",
args=c(paste0(out_dir,"/ga_01"),
paste0(out_dir,"/ga_01/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
# Execute classifier
system2(command="./galaxy/mFam_train_classifier.r",
args=c("./",
paste0(out_dir,"/ga_01/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
# Execute classifier
system2(command="./galaxy/mFam_train_classifier.r",
args=c("./",
paste0(out_dir,"/ga_01/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
# Evaluate mFam classifier results
list.files(paste0(out_dir,"/ga_01/", pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
2020-07-28_11/22/42_lib.msp__Results.tsv
return(fitness_score)
}
# ---------- Perform Genetic Algorithm here ----------
model_ga <- ga(type="binary",          # Optimization data type
fitness=mFam_ga_fitness,# Fitness function
elitism=3,              # Number of best individuals (compounds) to pass to next iteration
pmutation=1/100,        # Mutation rate probability
popSize=10,             # Number of individuals / solutions
nBits=mFam_num_spectra, # Total number of variables in compound matrix
run=10,                 # Max iterations without improvement (stopping criteria)
maxiter=200,            # Max iterations
monitor=gaMonitor,      # Monitoring of intermediate results: plot | gaMonitor | FALSE
keepBest=TRUE,          # Keep the best solution at the end
parallel=TRUE           # Allow parallel procesing
)
# Print summary on Genetic Algorithm
plot(model_ga, main="Genetic Algorithm Performance", cex.points=0.9, col=c("dodgerblue4", "dodgerblue3",  adjustcolor("dodgerblue2", alpha.f=0.1)), pch=c(19,16), lty=c(1,2), legend=TRUE, grid=graphics:::grid)
summary(model_ga)
best_ga_solution <- as.numeric(model_ga@solution[1,])
knapsack[best_ga_solution == 1, ]
cat(best_ga_solution %*% knapsack$survivalpoints)
cat(best_ga_solution %*% knapsack$weight)
# Evaluate mFam classifier results
list.files(paste0(out_dir,"/ga_01/"), pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
# Evaluate mFam classifier results
gen_mFam_results <- list.files(paste0(out_dir,"/ga_01/"), pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
# Evaluate mFam classifier results
gen_mFam_results_file <- list.files(paste0(out_dir,"/ga_01/"), pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
gen_mFam_result <- read.table(file=gen_mFam_results_file, quote='\"', sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
gen_mFam_result
dim(gen_mFam_results)
typeof(gen_mFam_results)
read.table(file=gen_mFam_results_file, quote='\"', sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
colnames(gen_mFam_results)
gen_mFam_results <- read.table(file=gen_mFam_results_file, sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
colnames(gen_mFam_results)
gen_mFam_results$AUC.PR
sum(gen_mFam_results$AUC.PR)
gen_mFam_results$TPR.for.FPR...5.
sum(gen_mFam_results$TPR.for.FPR...5.)
list.files("bla")
is.null(list.files("bla"))
length(list.files("bla"))
# ---------- Evaluaton function of Genetic Algorithm fitness ----------
mFam_ga_fitness <- function(x) {
# Define fitness score
fitness_score <- 0
# Read mFam library
mFam_lib <- read_msp(mFam_file)
# Apply binary vector to mFam library
dir.create(path=paste0(out_dir,"/ga_01"), recursive=TRUE, mode="0755")
write_msp(msp_filename=paste0(out_dir,"/ga_01/","lib.msp"), msp_lib=mFam_lib, indices=x)
gen_mFam_lib <- read_msp(paste0(out_dir,"/ga_01/","lib.msp"))
# Execute mFam classifier
system2(command="./galaxy/mFam_train_classifier.r",
args=c("./",
paste0(out_dir,"/ga_01/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
# Evaluate mFam classifier results
gen_mFam_results_file <- list.files(paste0(out_dir,"/ga_01/"), pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
if (length(gen_mFam_results_file) == 0) {
fitness_score <- 0
score_auc_pr <- 0
score_num_classes <- 0
score_tpr <- 0
} else {
gen_mFam_results <- read.table(file=gen_mFam_results_file, sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
score_auc_pr <- sum(gen_mFam_results$AUC.PR)
score_num_classes <- nrow(gen_mFam_results)
score_tpr <- sum(gen_mFam_results$TPR.for.FPR...5.)
}
# Calculate fitness score
fitness_score <- score_auc_pr
return(fitness_score)
}
as.character(1)
as.character(ga_run_id)
ga_run_id<-2
as.character(ga_run_id)
sprintf("%f", 3)
sprintf("%.2f", 3)
sprintf("%8f", 3)
sprintf("%8s", 3)
sprintf("%08s", 3)
ga_out_dir <- paste0(out_dir,"/ga_",sprintf("%10s",ga_run_id))
ga_out_dir
ga_out_dir <- paste0(out_dir,"/ga_",sprintf("%010s",ga_run_id))
ga_out_dir
# ---------- Evaluaton function of Genetic Algorithm fitness ----------
mFam_ga_fitness <- function(x) {
# Define fitness score
fitness_score <- 0
# Create output dir
ga_run_id <- ga_run_id + 1
ga_out_dir <- paste0(out_dir,"/ga_",sprintf("%010s",ga_run_id))
dir.create(path=, recursive=TRUE, mode="0755")
# Read mFam library
mFam_lib <- read_msp(mFam_file)
# Apply binary vector to mFam library
write_msp(msp_filename=paste0(ga_out_dir,"/","lib.msp"), msp_lib=mFam_lib, indices=x)
gen_mFam_lib <- read_msp(paste0(ga_out_dir,"/","lib.msp"))
# Execute mFam classifier
gen_mFam_exec <- system2(command="./galaxy/mFam_train_classifier.r",
args=c("./",
paste0(ga_out_dir,"/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
if ((gen_mFam_exec$status != 0) | (gen_mFam_exec$status == 127)) {
print(paste0("Warning. GA run #", ga_out_dir, " exited with errors."))
fitness_score <- 0
return(fitness_score)
}
# Evaluate mFam classifier results
gen_mFam_results_file <- list.files(ga_out_dir, pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
if (length(gen_mFam_results_file) == 0) {
fitness_score <- 0
return(fitness_score)
} else {
gen_mFam_results <- read.table(file=gen_mFam_results_file, sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
score_auc_pr <- sum(gen_mFam_results$AUC.PR)
score_num_classes <- nrow(gen_mFam_results)
score_tpr <- sum(gen_mFam_results$TPR.for.FPR...5.)
}
# Calculate fitness score
fitness_score <- score_auc_pr
return(fitness_score)
}
# ---------- Evaluaton function of Genetic Algorithm fitness ----------
mFam_ga_fitness <- function(x) {
# Define fitness score
fitness_score <- 0
# Create output dir
ga_run_id <- ga_run_id + 1
ga_out_dir <- paste0(out_dir,"/ga_",sprintf("%010s",ga_run_id))
dir.create(path=, recursive=TRUE, mode="0755")
# Read mFam library
mFam_lib <- read_msp(mFam_file)
# Apply binary vector to mFam library
write_msp(msp_filename=paste0(ga_out_dir,"/","lib.msp"), msp_lib=mFam_lib, indices=x)
gen_mFam_lib <- read_msp(paste0(ga_out_dir,"/","lib.msp"))
# Execute mFam classifier
gen_mFam_exec <- system2(command="./galaxy/mFam_train_classifier.r",
args=c("./",
paste0(ga_out_dir,"/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
if ((gen_mFam_exec$status != 0) | (gen_mFam_exec$status == 127)) {
print(paste0("Warning. GA run #", ga_out_dir, " exited with errors."))
fitness_score <- 0
return(fitness_score)
}
# Evaluate mFam classifier results
gen_mFam_results_file <- list.files(ga_out_dir, pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
if (length(gen_mFam_results_file) == 0) {
fitness_score <- 0
return(fitness_score)
} else {
gen_mFam_results <- read.table(file=gen_mFam_results_file, sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
score_auc_pr <- sum(gen_mFam_results$AUC.PR)
score_num_classes <- nrow(gen_mFam_results)
score_tpr <- sum(gen_mFam_results$TPR.for.FPR...5.)
}
# Calculate fitness score
fitness_score <- score_auc_pr
return(fitness_score)
}
# ---------- Perform Genetic Algorithm here ----------
model_ga <- ga(type="binary",          # Optimization data type
fitness=mFam_ga_fitness,# Fitness function
elitism=3,              # Number of best individuals (compounds) to pass to next iteration
pmutation=1/100,        # Mutation rate probability
popSize=10,             # Number of individuals / solutions
nBits=mFam_num_spectra, # Total number of variables in compound matrix
run=10,                 # Max iterations without improvement (stopping criteria)
maxiter=10,            # Max iterations
monitor=gaMonitor,      # Monitoring of intermediate results: plot | gaMonitor | FALSE
keepBest=TRUE,          # Keep the best solution at the end
parallel=TRUE           # Allow parallel procesing
)
ga_run_id
# ---------- Evaluaton function of Genetic Algorithm fitness ----------
mFam_ga_fitness <- function(x) {
# Define fitness score
fitness_score <- 0
# Create output dir
ga_run_id <- ga_run_id + 1
ga_out_dir <- paste0(out_dir,"/ga_",sprintf("%010s",ga_run_id))
dir.create(path=, recursive=TRUE, mode="0755")
# Read mFam library
mFam_lib <- read_msp(mFam_file)
# Apply binary vector to mFam library
write_msp(msp_filename=paste0(ga_out_dir,"/","lib.msp"), msp_lib=mFam_lib, indices=x)
gen_mFam_lib <- read_msp(paste0(ga_out_dir,"/","lib.msp"))
# Execute mFam classifier
gen_mFam_exec <- system2(command="./galaxy/mFam_train_classifier.r",
args=c("./",
paste0(ga_out_dir,"/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
if ((gen_mFam_exec$status != 0) | (gen_mFam_exec$status == 127)) {
print(paste0("Warning. GA run #", ga_out_dir, " exited with errors."))
fitness_score <- 0
return(fitness_score)
}
# Evaluate mFam classifier results
gen_mFam_results_file <- list.files(ga_out_dir, pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
if (length(gen_mFam_results_file) == 0) {
fitness_score <- 0
return(fitness_score)
} else {
gen_mFam_results <- read.table(file=gen_mFam_results_file, sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
score_auc_pr <- sum(gen_mFam_results$AUC.PR)
score_num_classes <- nrow(gen_mFam_results)
score_tpr <- sum(gen_mFam_results$TPR.for.FPR...5.)
}
# Calculate fitness score
fitness_score <- score_auc_pr
return(fitness_score)
}
# ---------- Perform Genetic Algorithm here ----------
model_ga <- ga(type="binary",          # Optimization data type
fitness=mFam_ga_fitness,# Fitness function
elitism=3,              # Number of best individuals (compounds) to pass to next iteration
pmutation=1/100,        # Mutation rate probability
popSize=10,             # Number of individuals / solutions
nBits=mFam_num_spectra, # Total number of variables in compound matrix
run=10,                 # Max iterations without improvement (stopping criteria)
maxiter=10,             # Max iterations
monitor=gaMonitor,      # Monitoring of intermediate results: plot | gaMonitor | FALSE
keepBest=TRUE,          # Keep the best solution at the end
parallel=TRUE           # Allow parallel procesing
)
x
# Define fitness score
fitness_score <- 0
# Create output dir
ga_run_id <- ga_run_id + 1
ga_out_dir <- paste0(out_dir,"/ga_",sprintf("%010s",ga_run_id))
dir.create(path=, recursive=TRUE, mode="0755")
# ---------- Evaluaton function of Genetic Algorithm fitness ----------
mFam_ga_fitness <- function(x) {
# Define fitness score
fitness_score <- 0
# Create output dir
ga_run_id <- ga_run_id + 1
ga_out_dir <- paste0(out_dir,"/ga_",sprintf("%010s",ga_run_id))
dir.create(path=ga_out_dir, recursive=TRUE, mode="0755")
# Read mFam library
mFam_lib <- read_msp(mFam_file)
# Apply binary vector to mFam library
write_msp(msp_filename=paste0(ga_out_dir,"/","lib.msp"), msp_lib=mFam_lib, indices=x)
gen_mFam_lib <- read_msp(paste0(ga_out_dir,"/","lib.msp"))
# Execute mFam classifier
gen_mFam_exec <- system2(command="./galaxy/mFam_train_classifier.r",
args=c("./",
paste0(ga_out_dir,"/","lib.msp"),
"./data/2019-05-23_Scaffolds.tsv",
paste0(out_dir,"/ga_01")),
wait=TRUE, timeout=0)
if ((gen_mFam_exec$status != 0) | (gen_mFam_exec$status == 127)) {
print(paste0("Warning. GA run #", ga_out_dir, " exited with errors."))
fitness_score <- 0
return(fitness_score)
}
# Evaluate mFam classifier results
gen_mFam_results_file <- list.files(ga_out_dir, pattern="*Results.tsv", recursive=FALSE, full.names=TRUE)
if (length(gen_mFam_results_file) == 0) {
fitness_score <- 0
return(fitness_score)
} else {
gen_mFam_results <- read.table(file=gen_mFam_results_file, sep='\t', header=TRUE, stringsAsFactors=TRUE, fill=TRUE)
score_auc_pr <- sum(gen_mFam_results$AUC.PR)
score_num_classes <- nrow(gen_mFam_results)
score_tpr <- sum(gen_mFam_results$TPR.for.FPR...5.)
}
# Calculate fitness score
fitness_score <- score_auc_pr
return(fitness_score)
}
ga_run_id <- 0
# ---------- Perform Genetic Algorithm here ----------
model_ga <- ga(type="binary",          # Optimization data type
fitness=mFam_ga_fitness,# Fitness function
elitism=3,              # Number of best individuals (compounds) to pass to next iteration
pmutation=1/100,        # Mutation rate probability
popSize=10,             # Number of individuals / solutions
nBits=mFam_num_spectra, # Total number of variables in compound matrix
run=10,                 # Max iterations without improvement (stopping criteria)
maxiter=10,             # Max iterations
monitor=gaMonitor,      # Monitoring of intermediate results: plot | gaMonitor | FALSE
keepBest=TRUE,          # Keep the best solution at the end
parallel=TRUE           # Allow parallel procesing
)
